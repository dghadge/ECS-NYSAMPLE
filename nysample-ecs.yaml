Description: "This template creates an ECS cluster and deploys drupal as a service\
  \ on that ECS cluster\n"
Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the ECS instances.
    Type: AWS::EC2::KeyPair::KeyName
  ClusterName:
    Description: 'ECR Image (example: nysampleorg-qa)'
    Type: String
    Default: nysampleorg-qa
  ServiceName:
    Description: 'ECS Service/Task Definition Name (example: nysampleorg-webapp-qa)'
    Type: String
    Default: nysampleorg-webapp
  ECRImage:
    Description: 'ECR Image (example: 491147561046.dkr.ecr.us-east-1.amazonaws.com/nysampledrupal8:qa-latest)'
    Type: String
  LoadBalancerCertificateArn:
    Description: ARN of the certificate to associate with the load balancer.
    Type: String
  VpcId:
    Description: Select a VPC that allows instances to access the Internet.
    Type: AWS::EC2::VPC::Id
    Default: vpc-e897a480
  PrivateSubnets:
    Description: Select at two PRIVATE subnets in your selected VPC.
    Type: List<AWS::EC2::Subnet::Id>
    Default: subnet-98045ef0,subnet-9e9101e4
  PublicSubnets:
    Description: Select at two PUBLIC subnets in your selected VPC.
    Type: List<AWS::EC2::Subnet::Id>
    Default: subnet-9e9101e4,subnet-0a7e8646
  TaskCount:
    Description: The number of instantiations of the specified task definition
    Type: Number
    Default: '3'
  DesiredCapacity:
    Description: Number of instances to launch in your ECS cluster.
    Type: Number
    Default: '3'
  MaxSize:
    Description: Maximum number of instances that can be launched in your ECS cluster.
    Type: Number
    Default: '4'
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t2.large
    AllowedValues:
      - t2.large
      - t2.medium
    ConstraintDescription: Please choose a nysample approved instance type.
  AlertSnsTopicArn:
    Description: SNS Topic ARN for ECS notifications.
    Type: String
  Environment:
    Type: String
    Description: Environment Name Tag
    Default: qa
  S3AccessKeyARN:
    Type: String
    Description: ARN for S3 Access Key
    Default: arn:aws:ssm:us-east-1:491147561046:parameter/development/s3/nysampleorg-webapp/access_key
  S3SecretKeyARN:
    Type: String
    Description: ARN for S3 Access Key
    Default: arn:aws:ssm:us-east-1:491147561046:parameter/development/s3/nysampleorg-webapp/secret_key
  pMasterStackName:
    Description: If nested, name of master stack
    Type: String

Mappings:
  AWSRegionToAMI:
    us-east-1:
      AMIID: ami-097e3d1cdb541f43e
    us-east-2:
      AMIID: ami-0329a1fdc914b0c55
    us-west-1:
      AMIID: ami-0e7f661f69bb5d6b4
    us-west-2:
      AMIID: ami-00e0090ac21971297
Resources:
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref 'ClusterName'
  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ECS Security Group
      VpcId: !Ref 'VpcId'
  ECSSecurityGroupHTTPinbound:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'ECSSecurityGroup'
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      CidrIp: '0.0.0.0/0'
  ECSSecurityGroupHTTPSinbound:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'ECSSecurityGroup'
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      CidrIp: '0.0.0.0/0'
  ECSSecurityGroupSSHinbound:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'ECSSecurityGroup'
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      CidrIp: '0.0.0.0/0'
  ECSSecurityGroupALBports:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'ECSSecurityGroup'
      IpProtocol: tcp
      FromPort: 31000
      ToPort: 61000
      SourceSecurityGroupId: !Ref 'ECSSecurityGroup'
  CloudwatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join
        - '-'
        - - ECSLogGroup
          - !Ref 'AWS::StackName'
      RetentionInDays: 14
  ECSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ExecutionRoleArn: !Ref 'ECSTaskRole'
      Family: !Ref 'ServiceName'
      ContainerDefinitions:
        - Name: !Ref 'ServiceName'
          Cpu: 1024
          Essential: true
          Image: !Ref 'ECRImage'
          Memory: 500
          Environment:
            - Name: DB_DRIVER
              Value: !Join
                - ''
                - - '{{resolve:secretsmanager:'
                  - Fn::ImportValue: !Join ['-', [ 'oRDSDatabaseSecrets', !Ref 'pMasterStackName'] ]
                  - :SecretString:engine}}
            - Name: DB_HOST
              Value: !Join
                - ''
                - - '{{resolve:secretsmanager:'
                  - Fn::ImportValue: !Join ['-', [ 'oRDSDatabaseSecrets', !Ref 'pMasterStackName'] ]
                  - :SecretString:host}}
            - Name: DB_NAME
              Value: !Join 
                - ''
                - - Fn::ImportValue: !Join ['-', [ 'oRDSDatabaseName', !Ref 'pMasterStackName'] ]
            - Name: DB_PASSWORD
              Value: !Join
                - ''
                - - '{{resolve:secretsmanager:'
                  - Fn::ImportValue: !Join ['-', [ 'oRDSDatabaseSecrets', !Ref 'pMasterStackName'] ]
                  - :SecretString:password}}
            - Name: DB_USER
              Value: !Join
                - ''
                - - '{{resolve:secretsmanager:'
                  - Fn::ImportValue: !Join ['-', [ 'oRDSDatabaseSecrets', !Ref 'pMasterStackName'] ]
                  - :SecretString:username}}
            - Name: REDIS_ENDPOINT
              Value: !Join 
                - ''
                - - Fn::ImportValue: !Join ['-', [ 'oRedisEndpoint', !Ref 'pMasterStackName'] ]
            - Name: REDIS_HOST
              Value: !Join 
                - ''
                - - Fn::ImportValue: !Join ['-', [ 'oRedisHost', !Ref 'pMasterStackName'] ]
            - Name: ENVIRONMENT
              Value: !Ref 'Environment'
          Secrets:
            - Name: S3_ACCESS_KEY
              ValueFrom: !Ref 'S3AccessKeyARN'
            - Name: S3_SECRET_KEY
              ValueFrom: !Ref 'S3SecretKeyARN'
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref 'CloudwatchLogsGroup'
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: !Ref 'ServiceName'
          PortMappings:
            - ContainerPort: 80
              HostPort: 0
  ECSALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '30'
      Subnets:
        - !Select
          - 0
          - !Ref 'PublicSubnets'
        - !Select
          - 1
          - !Ref 'PublicSubnets'
      SecurityGroups:
        - !Ref 'ECSSecurityGroup'
  ECSHTTPSALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn: ECSServiceRole
    Properties:
      Certificates:
        - CertificateArn: !Ref 'LoadBalancerCertificateArn'
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref 'ECSALBTargerGroup'
      LoadBalancerArn: !Ref 'ECSALB'
      Port: 443
      Protocol: HTTPS
  ECSALBHTTPSListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref 'ECSALBTargerGroup'
      Conditions:
        - Field: path-pattern
          Values:
            - /
      ListenerArn: !Ref 'ECSHTTPSALBListener'
      Priority: 1
  ECSHTTPALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn: ECSServiceRole
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref 'ECSALBTargerGroup'
      LoadBalancerArn: !Ref 'ECSALB'
      Port: 80
      Protocol: HTTP
  ECSALBHTTPListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref 'ECSALBTargerGroup'
      Conditions:
        - Field: path-pattern
          Values:
            - /
      ListenerArn: !Ref 'ECSHTTPALBListener'
      Priority: 1
  ECSALBTargerGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: ECSALB
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /index.php
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: 200,301,302
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId: !Ref 'VpcId'
  ECSAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: !Ref 'PrivateSubnets'
      LaunchConfigurationName: !Ref 'ECSLaunchConfiguration'
      MinSize: '1'
      MaxSize: !Ref 'MaxSize'
      DesiredCapacity: !Ref 'DesiredCapacity'
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    UpdatePolicy:
      AutoScalingReplacingUpdate:
        WillReplace: true
  ECSLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !FindInMap
        - AWSRegionToAMI
        - !Ref 'AWS::Region'
        - AMIID
      SecurityGroups:
        - !Ref 'ECSSecurityGroup'
        - Fn::ImportValue: !Join ['-', [ 'oRDSAccessSecurityGroup', !Ref 'pMasterStackName'] ]
        - Fn::ImportValue: !Join ['-', [ 'oRedisAccessSecurityGroup', !Ref 'pMasterStackName'] ]
      InstanceType: !Ref 'InstanceType'
      IamInstanceProfile: !Ref 'EC2InstanceProfile'
      KeyName: !Ref 'KeyName'
      UserData: !Base64
        Fn::Join:
          - ''
          - - "#!/bin/bash -xe\n"
            - echo ECS_CLUSTER=
            - !Ref 'ECSCluster'
            - " >> /etc/ecs/ecs.config\n"
            - "yum install -y aws-cfn-bootstrap\n"
            - '/opt/aws/bin/cfn-signal -e $? '
            - '         --stack '
            - !Ref 'AWS::StackName'
            - '         --resource ECSAutoScalingGroup '
            - '         --region '
            - !Ref 'AWS::Region'
            - "\n"
  ECSService:
    Type: AWS::ECS::Service
    DependsOn: 
      - ECSHTTPSALBListener 
      - ECSHTTPALBListener
    Properties:
      Cluster: !Ref 'ECSCluster'
      ServiceName: !Ref 'ServiceName'
      DesiredCount: !Ref 'TaskCount'
      LoadBalancers:
        - ContainerName: !Ref 'ServiceName'
          ContainerPort: 80
          TargetGroupArn: !Ref 'ECSALBTargerGroup'
      Role: !Ref 'ECSServiceRole'
      TaskDefinition: !Ref 'ECSTaskDefinition'
  ECSServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - ecs-policy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - elasticloadbalancing:DeregisterInstancesFromLoadBalancer
                  - elasticloadbalancing:DeregisterTargets
                  - elasticloadbalancing:Describe*
                  - elasticloadbalancing:RegisterInstancesWithLoadBalancer
                  - elasticloadbalancing:RegisterTargets
                  - ec2:Describe*
                  - ec2:AuthorizeSecurityGroupIngress
                  - ecr:BatchCheckLayerAvailability
                  - ecr:BatchGetImage
                  - ecr:GetDownloadUrlForLayer
                  - ecr:GetAuthorizationToken
                Resource: '*'
  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - ecstask-policy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParameters
                  - kms:Decrypt
                Resource:
                  - !Ref 'S3AccessKeyARN'
                  - !Ref 'S3SecretKeyARN'
              - Effect: Allow
                Action:
                  - ecr:BatchCheckLayerAvailability
                  - ecr:BatchGetImage
                  - ecr:GetDownloadUrlForLayer
                  - ecr:GetAuthorizationToken
                  - logs:CreateLogStream
                  - logs:PutLogStream
                Resource: '*'
  ServiceScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 2
      MinCapacity: 1
      ResourceId: !Join
        - ''
        - - service/
          - !Ref 'ECSCluster'
          - /
          - !GetAtt 'ECSService.Name'
      RoleARN: !GetAtt 'AutoscalingRole.Arn'
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
  ServiceScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: AStepPolicy
      PolicyType: StepScaling
      ScalingTargetId: !Ref 'ServiceScalingTarget'
      StepScalingPolicyConfiguration:
        AdjustmentType: PercentChangeInCapacity
        Cooldown: 60
        MetricAggregationType: Average
        StepAdjustments:
          - MetricIntervalLowerBound: 0
            ScalingAdjustment: 200
  ALB500sAlarmScaleUp:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Join ['-', [!Ref 'pMasterStackName', 'Too many HTTP Code 5XX' ] ]
      AlarmDescription: Alarm if our ALB generates too many HTTP 500s.
      EvaluationPeriods: 1
      Statistic: Average
      Threshold: 10
      Period: 60
      AlarmActions:
        - !Ref 'ServiceScalingPolicy'
      Namespace: AWS/ApplicationELB
      Dimensions:
        - Name: LoadBalancer
          Value: !GetAtt 'ECSALB.LoadBalancerFullName'
      ComparisonOperator: GreaterThanThreshold
      MetricName: HTTPCode_ELB_5XX_Count
  CPUScaleInAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Join ['-', [!Ref 'pMasterStackName', 'CPU utilization less than 35%' ] ]
      AlarmDescription: Alarm if cpu utilization greater than 35% of reserved cpu
      Namespace: AWS/ECS
      MetricName: CPUUtilization
      Dimensions:
        - Name: ClusterName
          Value: !Ref 'ECSCluster'
        - Name: ServiceName
          Value: !GetAtt 'ECSService.Name'
      Statistic: Maximum
      Period: 60
      EvaluationPeriods: 10
      Threshold: 35
      ComparisonOperator: LessThanThreshold
      AlarmActions:
        - !Ref 'AlertSnsTopicArn'
  EC2InstanceProfileRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: ecs-service
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - ecs:CreateCluster
                  - ecs:DeregisterContainerInstance
                  - ecs:DiscoverPollEndpoint
                  - ecs:Poll
                  - ecs:RegisterContainerInstance
                  - ecs:StartTelemetrySession
                  - ecs:Submit*
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - ecr:BatchCheckLayerAvailability
                  - ecr:BatchGetImage
                  - ecr:GetDownloadUrlForLayer
                  - ecr:GetAuthorizationToken
                Resource: '*'
  AutoscalingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - application-autoscaling.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: service-autoscaling
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - application-autoscaling:*
                  - cloudwatch:DescribeAlarms
                  - cloudwatch:PutMetricAlarm
                  - ecs:DescribeServices
                  - ecs:UpdateService
                Resource: '*'
  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref 'EC2InstanceProfileRole'
Outputs:
  ECSService:
    Description: ECS Service Name
    Value: !Ref 'ECSService'
    Export:
      Name: !Join ['-', [ oECSService, !Ref 'pMasterStackName' ] ]
  ECSCluster:
    Description: ECS Cluster Name
    Value: !Ref 'ECSCluster'
    Export:
      Name: !Join ['-', [ oECSCluster, !Ref 'pMasterStackName' ] ]
  ECSALB:
    Description: ECS ALB DNS endpoint
    Value: !GetAtt 'ECSALB.DNSName'
    Export:
      Name: !Join ['-', [ oECSALB, !Ref 'pMasterStackName' ] ]
  ECSTaskdef:
    Description: ECS Task definition
    Value: !Ref 'ECSTaskDefinition'
    Export:
      Name: !Join ['-', [ oECSTaskdef, !Ref 'pMasterStackName' ] ] 
